#!/bin/bash
# @name Git Exec
# @brief Execute a git command against multiple local repositories at once
# @description
#
#    Execute a git command against all local repositories
#    stored under the directory located by the `$GITX_REPOS_HOME` environment variable
#
#    ## EXAMPLE
#
#    * Shows the status of all repositories
#
#    ```bash
#    git exec status --short
#    ```
#
#    * `Add, Commit and Push` on all repositories
#
#    ```bash
#    git exec acp "My Commit Message"
#    ```
#
#    * Perform a commit only again the `my-repo` repository
#
#    ```bash
#    git exec my-repo commit -m "My Commit"
#    ```
#
#    ## CONFIG
#
#    You should set the environment variable `GITX_REPOS_HOME` to a valid directory
#    that host multiple repositories as sub-directories.
#
#    ## SYNOPSIS
#
#    ```bash
#    git exec [repo name] <git sub-command>
#    ```
#
#    where:
#
#    * `repo name`, optional when specified the command will execute only against this repository (the `repo name` is the name of directory)
#    * `git sub-command` is any git sub-command
#
#    ## TIP
#
#    You can add it as alias in your `~.gitconfig`
#    ```ini
#    [alias]
#       x = "!git-exec"
#    ```

set -Eeuo pipefail
source bashlib-echo.sh
source bashlib-git.sh
source bashlib-string.sh
source bashlib-path.sh
source bashlib-error.sh
error::set_trap


# Git Directory to checkout may be in a config file
GITX_REPOS_FILE=${GITX_REPOS_FILE:-}
if [ "$GITX_REPOS_FILE" != "" ] && [ -f "$GITX_REPOS_FILE" ]; then
  IFS=$'\n' read -r -a REPO_DIRS -d $'\c0' <"$GITX_REPOS_FILE"
  echo::info "${#REPO_DIRS[*]} directory found in $GITX_REPOS_FILE"
fi


# The root directory where all repository may be the children
GITX_REPOS_HOME=${GITX_REPOS_HOME:-}
if [ -z "$GITX_REPOS_HOME" ]; then
  echo::err "The environment variable GITX_REPOS_HOME was not found. It's the path of a directory where all your git repository are stored"
  exit 1
fi


REPO_NAME=$1
REPO_DIR="$GITX_REPOS_HOME/$REPO_NAME"
if [ -d "$REPO_DIR/.git" ]; then
    REPO_DIRS+=("$REPO_DIR")
    shift
else
  for GITX_REPO_DIR in "$GITX_REPOS_HOME"/*; do
    if [ -d "$GITX_REPO_DIR/.git" ]; then
      REPO_DIRS+=("$GITX_REPO_DIR")
    fi
  done
fi

if [ ${#REPO_DIRS[*]} == 0 ]; then
  echo::err 'No Git repository found'
  exit 1
fi

COMMAND=$(git::get_eval_string "$@")

for REPO_DIR in "${REPO_DIRS[@]}"; do

  pushd "$REPO_DIR" >/dev/null

  # Header for each repo
  DIRECTORY_NAME=$(path::get_current_directory_name) # the directory name is the DIRECTORY_NAME
  CURRENT_BRANCH=$(git::get_current_branch)
  CURRENT_BRANCH_UPSTREAM=$(git::get_current_upstream_branch)
  # The format for branch and upstream comes from `git status --branch`
  HEAD="$(string::set_color "yellow" "${DIRECTORY_NAME}") (${CURRENT_BRANCH} ... ${CURRENT_BRANCH_UPSTREAM})"

  # If a batch exec, skip the non-dirty repo
  if ! git::is_dirty && [ ${#REPO_DIRS[@]} -ne 1  ]; then
      popd > /dev/null
      continue
  fi

  if ! OUTPUT=$(eval "$COMMAND"); then
    echo::err "$HEAD"
    echo::err "The command (${COMMAND}) has error"
    popd > /dev/null
    continue
  fi

  # remove the space and test if not of length zero
  if [[ ! -z ${OUTPUT// } ]]; then
    echo::echo ""
    echo::echo "$HEAD"
    echo::echo "$OUTPUT"
  fi

  popd >/dev/null

done

if [[ ${COMMAND} == 'status' ]]; then
  # As stated: https://git-scm.com/docs/git-ls-files#Documentation/git-ls-files.txt--t
  cat <<EOF
--------------------------------------------------------------
Legend File Status:
A - untracked new file (staged, in next commit)
H - tracked file that is not either unmerged or skip-worktree
S - tracked file that is skip-worktree
M - tracked file that is unmerged (may be or not staged, ie in the next commit)
R - tracked file with unstaged removal/deletion
C - tracked file with unstaged modification/change
K - untracked paths which are part of file/directory conflicts which prevent checking out tracked files
? - untracked file
U - file with resolve-undo information
EOF
fi

