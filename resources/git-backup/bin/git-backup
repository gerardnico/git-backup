#!/bin/bash

CLI_NAME=$(basename "$0") # Name of the cli


# Echo a message
function echo_log() {

  echo -e "$CLI_NAME: ${1:-}"

}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function finish() {
  echo_log "\n$CLI_NAME Script terminated\n"
}
trap finish EXIT

# Retrieve the value of an option
# ie with `--name=value`, this function will return `value`
# usage: `maximumMemory=$(getOptionValue "$arg")`
function getOptionValue() {
  # Options
  # shellcheck disable=SC2034
  IFS='=' read -r key value <<<"${1:2}"
  if [ "$value" == "" ]; then
    value=true
  fi
  echo "$value"
}

######################################
# Env
#####################################
GIT_REPOS_PATH=/tmp/git-repos
mkdir -p $GIT_REPOS_PATH

######################################
# Usage
#####################################
function help() {

  echo ""
  echo "Usage of the cli ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} command [argument ...] [--option[=value] ...]"
  echo ""
  echo "where command is one of:"
  echo "     * help       - this help"
  echo "     * list-repo  - list the repositories of a Git instance"
  echo ""
  echo ""
  echo "To get the help on one command"
  echo ""
  echo "   ${CLI_NAME} command --help"
  echo ""

}

function help_list_repo() {

  FUNCTION_NAME="list-repo"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--jq-raw-output] [--jq-expression] [--report=xxx]"
  echo ""
  echo "where:"
  echo "     * git_registry            - the git registry name to read from"
  echo "     * --silent                - a boolean option that will output only the result"
  echo "     * --jq-raw-output         - a boolean option that will not output the output as json"
  echo "     * --jq-expression='xxxx'  - the jq expression to parse the JSON API response"
  echo "     * --report=value          - the name of a preconfigured report where the value may be:"
  echo "                                     * ls       - the repo fullname separated by the IFS character"
  echo "                                     * asis     - the full json"
  echo "                                     * csv      - a csv"
  echo "     * --help           - this help"
  echo ""

}
function help_mirror() {

  FUNCTION_NAME="mirror"
    echo ""
    echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
    echo ""
    echo "   ${CLI_NAME} $FUNCTION_NAME source target [--silent]"
    echo ""
    echo "where:"
    echo "     * source     - a git registry name to read from"
    echo "     * target     - a git registry name to write to"

}



function git_mirror_fetch() {

  git -C $GIT_REPOS_PATH/algo fetch --all

}

######################################
# Unmount the drive
#####################################
function unmount(){
  sudo fusermount -u $GIT_REPOS_PATH
}

######################################
# Mount the drive
#####################################
function mount(){
  # https://rclone.org/docs/#environment-variables
  # export RCLONE_CONFIG_GIT_BACKUP_TYPE=s3
  # export RCLONE_CONFIG_GIT_BACKUP_ACCESS_KEY_ID=XXX
  # export RCLONE_CONFIG_GIT_BACKUP_SECRET_ACCESS_KEY=XXX
  rclone mount git_backup:git-backup $GIT_REPOS_PATH --daemon
}

function set_env(){

    local FUNCTION_NAME="set-env"

    # The instance is an unique name
    # that identifies a Git Server instance
    local GIT_INSTANCE
    local SILENT_OPTION=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_INSTANCE" == "" ]; then
              GIT_INSTANCE="${arg^^}" # ^^ for uppercase
            else
              echo_err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, the instance. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done


    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Setting env for Git Instance: $GIT_INSTANCE"

    # Target
    GIT_PLATFORM_ENV_NAME="GIT_${GIT_INSTANCE}_PLATFORM"
    if [ -z "${!GIT_PLATFORM_ENV_NAME+x}" ]; then
      echo_err "Environment variable '$GIT_PLATFORM_ENV_NAME' does not exist."
      exit 1
    else
      GIT_PLATFORM=${!GIT_PLATFORM_ENV_NAME}
      [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME:  * Platform: $GIT_PLATFORM"
    fi

    # Domain
    GIT_DOMAIN_ENV_NAME="GIT_${GIT_INSTANCE}_DOMAIN"
    if [ -z "${!GIT_DOMAIN_ENV_NAME+x}" ]; then
      case ${GIT_PLATFORM} in
        github)
          GIT_DOMAIN="github.com"
          ;;
        *)
          echo_err "Environment variable '$GIT_DOMAIN_ENV_NAME' does not exist."
          exit 1
          ;;
        esac
    else
      GIT_DOMAIN=${!GIT_DOMAIN_ENV_NAME}
    fi
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME:  * Domain: $GIT_DOMAIN"

    # API Access Token
    GIT_TOKEN_ENV_NAME="GIT_${GIT_INSTANCE}_TOKEN"
    if [ -z "${!GIT_TOKEN_ENV_NAME+x}" ]; then
        unset GIT_TOKEN;
        [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME:  * Api Token: Variable ($GIT_TOKEN_ENV_NAME) not found"
      else
        GIT_TOKEN=${!GIT_TOKEN_ENV_NAME}
        [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME:  * Api Token: Found"
    fi;

}

######################################
# List repo for a git provider
#####################################
function list_repo(){

  local FUNCTION_NAME="List Repo"
  local GIT_INSTANCE
  # Report are default value for JQ expression
  local REPORT
  # The default Jq args are platform dependent
  local JQ_EXPRESSION
  local JQ_RAW_OUTPUT_OPTION
  # By default, echo are added to the output
  local SILENT_OPTION=""

  # This for loop should have no echo
  # Why? We use this function to get the list of repo to handle
  # We therefore need the raw output without any echo
  for arg in "$@"; do
    case "$arg" in
    "--silent")
      SILENT_OPTION="--silent"
      ;;
    --jq-expression=*)
      JQ_EXPRESSION=$(getOptionValue "$arg")
      shift
      ;;
    "--jq-raw-output"|"--jq-raw")
      JQ_RAW_OUTPUT_OPTION="--raw-output"
      shift
      ;;
    --report=*)
      REPORT=$(getOptionValue "$arg")
      shift
      ;;
    "--help"|"-h")
      help_list_repo
      exit
      ;;
    *)
      # Command or arg
      if [ "$GIT_INSTANCE" == "" ]; then
          GIT_INSTANCE=$arg
        else
          echo_err "$FUNCTION_NAME: Too much argument found: list-repo except only one argument, the instance. ($arg) is the second argument"
          exit 1;
      fi
      shift
      ;;
    esac
  done


  set_env "$GIT_INSTANCE" "$SILENT_OPTION"


  # Report
  # Report are default values
  if [ "${REPORT}" == "" ]; then
    REPORT="default"
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: No Report found, set to: $REPORT"
  else
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Report: $REPORT"
  fi

  case ${GIT_PLATFORM} in
  gogs)

    # Auth Token
    if [ -z "${GIT_TOKEN+x}" ]; then
      echo_err "Git Token is mandatory to list repo for $GIT_PLATFORM"
      exit 1
    fi

    case ${REPORT} in
      "ls")
        JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      "asis")
        JQ_EXPRESSION_REPORT='.'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "default")
        JQ_EXPRESSION_REPORT='[.[] | .full_name]'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "csv")
        JQ_EXPRESSION_REPORT='["full_name", "fork"], (.[] | [.full_name, .fork]) | @csv'
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      *)
        echo_err "$FUNCTION_NAME: The report ($REPORT) is unknown"
        exit 1;
      ;;
    esac

    # Jq arguments
    if [ "${JQ_EXPRESSION}" == "" ]; then
        JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
    fi
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
    if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
        JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
    fi
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

    # URL AI
    URL_API="https://$GIT_DOMAIN/api/v1/user/repos"
    [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Requesting $URL_API"

    # Execute
    [ "$SILENT_OPTION" == "" ] && echo ""
    # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
    # shellcheck disable=SC2086
    curl -sS -H "Authorization: token $GIT_TOKEN" "$URL_API" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"
    [ "$SILENT_OPTION" == "" ] && echo ""
    ;;
  github)

      # Auth Token
      if [ -z "${GIT_TOKEN+x}" ]; then
        echo_err "Git Token is mandatory to list repo for $GIT_PLATFORM"
        exit 1
      fi

      case ${REPORT} in
        "ls")
          JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        "asis")
          JQ_EXPRESSION_REPORT='.'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "default")
          JQ_EXPRESSION_REPORT='[.[] | .full_name]'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "csv")
          JQ_EXPRESSION_REPORT='["full_name", "fork", "clone_url"], (.[] | [.full_name, .fork, .clone_url]) | @csv'
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        *)
          echo_err "$FUNCTION_NAME: The report ($REPORT) is unknown"
          exit 1;
        ;;
      esac

      # Jq arguments
      if [ "${JQ_EXPRESSION}" == "" ]; then
          JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
      fi
      [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
      if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
          JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
      fi
      [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

      # URL AI
      URL_API="https://api.github.com/user/repos"
      [ "$SILENT_OPTION" == "" ] && echo_log "$FUNCTION_NAME: Requesting $URL_API"

      # Execute
      [ "$SILENT_OPTION" == "" ] && echo ""
      # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
      # shellcheck disable=SC2086
      curl -sS -H "Authorization: token $GIT_TOKEN" "$URL_API" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"
      [ "$SILENT_OPTION" == "" ] && echo ""
      ;;
  *)
    echo_err "The git platform $GIT_PLATFORM is not yet implemented"
    exit 1
    ;;
  esac

}

function mirror() {

  local FUNCTION_NAME="mirror"
  local GIT_SOURCE
  local GIT_TARGET
  for arg in "$@"; do
      case "$arg" in
        "--help"|"-h")
          help_mirror
          exit;
         ;;
        *)
          if [ "$GIT_SOURCE" == "" ]; then
              GIT_SOURCE="${arg^^}" # ^^ for uppercase
          elif [ "$GIT_TARGET" == "" ]; then
              GIT_TARGET="${arg^^}" # ^^ for uppercase
          else
              echo_err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only 2 arguments, the source and the target. ($arg) is the third argument"
              exit 1;
          fi
          shift
          ;;
      esac
  done

  # Source
  if [ "$GIT_SOURCE" == "" ]; then
    echo_err "$FUNCTION_NAME: A git source is excepted as first argument"
    exit 1;
  fi

  # Target
#  if [ "$GIT_TARGET" == "" ]; then
#    echo_err "$FUNCTION_NAME: A git target is excepted as second argument"
#    exit 1;
#  fi

  # Get the Json as CSV and loop over it
  result=$(list_repo "$GIT_SOURCE" "--jq-expression=(.[] | [.full_name, .fork, .clone_url, .ssh_url]) | @csv" '--jq-raw-output' '--silent')
  echo "$result" | while IFS=',' read -r REPO_NAME REPO_FORK REPO_CLONE_URL REPO_SSH_URL; do
    REPO_NAME=$(echo "$REPO_NAME" | tr -d '"')
    echo "FullName: $REPO_NAME, Fork: $REPO_FORK"
    echo "Clone URL: $REPO_CLONE_URL"
    echo "Ssh URL: $REPO_SSH_URL"
    # git clone --mirror https://$GIT_USER:$GIT_PASSWORD@gogs.bytle.net/nickeau/algo $GIT_REPOS_PATH/algo2
    # exit
  done


}


COMMAND=""

# Parsing only the command
# Options are command related and are parsed
# in each function
SILENT_OPTION=""
for arg in "$@"; do
  case "$arg" in
  --silent|s)
    SILENT_OPTION="--silent"
    ;;
  --*|-*)
    ARGUMENTS+=("$arg")
    shift
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND=$1
      else
        ARGUMENTS+=("$arg")
    fi
    shift
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  [ "$SILENT_OPTION" == "" ] && echo_log 'No command was given, help chosen.'
  COMMAND='help'
fi

[ "$SILENT_OPTION" == "" ] && echo_log
[ "$SILENT_OPTION" == "" ] && echo_log "${CLI_NAME^} ${COMMAND^}"
[ "$SILENT_OPTION" == "" ] && echo_log "-------------------------------------------"
[ "$SILENT_OPTION" == "" ] && echo_log ""
case ${COMMAND} in
help)
  help
  ;;
list-repo)
  list_repo "${ARGUMENTS[@]}"
  ;;
mirror)
  mirror "${ARGUMENTS[@]}"
  ;;
*)
  echo_err "The command $COMMAND is unknown"
  help
  exit 1
  ;;
esac
