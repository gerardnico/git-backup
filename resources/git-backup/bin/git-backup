#!/bin/bash
# flag
# e - Exit if any error
# u - Treat unset variables as an error when substituting
# o pipefail - the return value of a pipeline is the status of the last command to exit with a non-zero status or zero if no command exited with a non-zero status
# E - the ERR trap is inherited by shell functions
set -Eeuo pipefail

CLI_NAME=$(basename "$0") # Name of the cli


# Echo a message
# Accept as first argument a flag --silent or -s to no echo anything
function echo_log() {

  for arg in "$@"; do
        case "$arg" in
        "--silent"|"-s")
          return
          ;;
        "")
          # empty arg
        ;;
        *)
          echo -e "$CLI_NAME: ${arg:-}"
          ;;
        esac
  done


}

# Print the error message $1
function echo_err() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  #(>&2 echo -e "${RED}$1${NC}")
  echo_log "${RED}$1${NC}"
}

function finish() {
  echo_log "\n$CLI_NAME Script terminated\n"
}
trap finish EXIT

# Retrieve the value of an option
# ie with `--name=value`, this function will return `value`
# usage: `maximumMemory=$(getOptionValue "$arg")`
function getOptionValue() {
  # Options
  # shellcheck disable=SC2034
  IFS='=' read -r key value <<<"${1:2}"
  if [ "$value" == "" ]; then
    value=true
  fi
  echo "$value"
}


######################################
# Usage
#####################################
function help() {

  echo ""
  echo "Usage of the cli ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} command [argument ...] [--option[=value] ...]"
  echo ""
  echo "where command is one of:"
  echo "     * help       - this help"
  echo "     * list-repo  - list the repositories of a Git registry"
  echo "     * backup     - backup the repositories of a Git registry"
  echo "     * mount      - mount a rclone Git registry "
  echo ""
  echo ""
  echo "To get the help on one command"
  echo ""
  echo "   ${CLI_NAME} command --help"
  echo ""

}

function help_mount() {

  FUNCTION_NAME="mount"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--unmount] [--daemon]"
  echo ""
  echo "where:"
  echo "     * git_registry            - the git registry name to read from"
  echo "     * --silent                - a boolean option that will output only the result"
  echo "     * --unmount               - unmount"
  echo "     * --daemon                - put rclone process in the background"
  echo "     * --help                  - this help"
  echo ""

}

function help_list_repo() {

  FUNCTION_NAME="list-repo"
  echo ""
  echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
  echo ""
  echo "   ${CLI_NAME} $FUNCTION_NAME git_registry [--silent] [--jq-raw-output] [--jq-expression] [--report=xxx]"
  echo ""
  echo "where:"
  echo "     * git_registry            - the git registry name to read from"
  echo "     * --silent                - a boolean option that will output only the result"
  echo "     * --jq-raw-output         - a boolean option that will not output the output as json"
  echo "     * --jq-expression='xxxx'  - the jq expression to parse the JSON API response"
  echo "     * --report=value          - the name of a preconfigured report where the value may be:"
  echo "                                     * ls       - the repo fullname separated by the IFS character"
  echo "                                     * asis     - the full json"
  echo "                                     * csv      - a csv"
  echo "     * --max-repo-count='x'    - the maximum number of repositories to retrieve"
  echo "     * --help           - this help"
  echo ""

}

function help_backup() {

  FUNCTION_NAME="backup"
    echo ""
    echo "Usage of the $FUNCTION_NAME command of ${CLI_NAME}"
    echo ""
    echo "   ${CLI_NAME} $FUNCTION_NAME source target [--silent]"
    echo ""
    echo "where:"
    echo "     * source     - a git registry name to read from"
    echo "     * target     - a git registry name to write to"

}




######################################
# Mount/unmount a rclone destination
#####################################
function mount(){

  local RCLONE_MOUNTED_PATH=/tmp/rclone
  mkdir -p $RCLONE_MOUNTED_PATH

  local FUNCTION_NAME=mount
  local SILENT_OPTION=""
  local GIT_REGISTRY=""
  local FUSE_ACTION="mount"
  local RCLONE_PROCESS_MODE="inline"
  for arg in "$@"; do
          case "$arg" in
          "--silent"|"-s")
            SILENT_OPTION="silent"
            ;;
          "--unmount")
            FUSE_ACTION="unmount"
            ;;
          "--daemon")
            RCLONE_PROCESS_MODE="daemon"
            ;;
          "")
            # empty arg
          ;;
          "--help"|"-h")
            help_mount
            exit
          ;;
          *)
            if [ "$GIT_REGISTRY" == "" ]; then
                GIT_REGISTRY="$arg"
              else
                echo_err "$FUNCTION_NAME: Only one argument is supported. ($arg) is the second argument"
                exit 1
            fi
            ;;
          esac
  done

  # Unmount
  if [ "$FUSE_ACTION" == "unmount" ]; then

    echo_log "$FUNCTION_NAME: Unmounting $RCLONE_MOUNTED_PATH"
    # Force
    umount --force $RCLONE_MOUNTED_PATH

    # Fusermount does not exist on alpine
    # Otherwise it would have been:
    # fusermount -u $RCLONE_MOUNTED_PATH
    return;

  fi

  if [ "$GIT_REGISTRY" == "" ]; then
      echo_err "$FUNCTION_NAME: A Git registry name is needed as first argument "
      exit 1
  fi
  set_env "$SILENT_OPTION" $GIT_REGISTRY

  # Rclone S3
  if [ "$GIT_PLATFORM" != "rclone" ]; then
      echo_err "$FUNCTION_NAME: The git registry '$GIT_REGISTRY' is not a rclone platform but $GIT_PLATFORM"
      exit 1
  fi;

  # Conf via env variables
  # https://rclone.org/docs/#environment-variables
  echo_log "$FUNCTION_NAME: Set Rclone Conf"
  RCLONE_TYPE_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_TYPE"
  if [ -z "${!RCLONE_TYPE_ENV_NAME+x}" ]; then
    echo_err "$FUNCTION_NAME: Environment variable '$RCLONE_TYPE_ENV_NAME' is mandatory for the platform $GIT_PLATFORM."
    exit 1
  else
    # export RCLONE_CONFIG_GIT_BACKUP_TYPE=s3
    export RCLONE_CONFIG_GIT_BACKUP_TYPE=${!RCLONE_TYPE_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone Type: $RCLONE_CONFIG_GIT_BACKUP_TYPE"
  fi;

  if [ "$RCLONE_CONFIG_GIT_BACKUP_TYPE" != "s3" ]; then
    echo_err "With the platform $GIT_PLATFORM, we support only s3 as type, not $RCLONE_CONFIG_GIT_BACKUP_TYPE"
    exit 1
  fi;

  # Provider Property
  RCLONE_PROVIDER_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_PROVIDER"
  if [ -z "${!RCLONE_PROVIDER_ENV_NAME+x}" ]; then
    echo_log "$FUNCTION_NAME:   * Rclone Provider: not set"
    exit 1
  else
    export RCLONE_CONFIG_GIT_BACKUP_PROVIDER=${!RCLONE_PROVIDER_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone Provider: $RCLONE_CONFIG_GIT_BACKUP_PROVIDER"
  fi;

  # Endpoint Property
  RCLONE_ENDPOINT_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_ENDPOINT"
  if [ -z "${!RCLONE_ENDPOINT_ENV_NAME+x}" ]; then
    echo_log "$FUNCTION_NAME:   * Rclone EndPoint: not set"
    exit 1
  else
    export RCLONE_CONFIG_GIT_BACKUP_ENDPOINT=${!RCLONE_ENDPOINT_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone EndPoint: $RCLONE_CONFIG_GIT_BACKUP_ENDPOINT"
  fi;

  # Access Key Property
  RCLONE_ACCESS_KEY_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_ACCESS_KEY"
  if [ -z "${!RCLONE_ACCESS_KEY_ENV_NAME+x}" ]; then
    echo_err "Environment variable '$RCLONE_ACCESS_KEY_ENV_NAME' is mandatory for rclone s3."
    exit 1
  else
    # export RCLONE_CONFIG_GIT_BACKUP_ACCESS_KEY_ID=XXX
    export RCLONE_CONFIG_GIT_BACKUP_ACCESS_KEY_ID=${!RCLONE_ACCESS_KEY_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone AccessKey: xxxx"
  fi;

  # Secret Key Property
  RCLONE_SECRET_KEY_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_SECRET_KEY"
  if [ -z "${!RCLONE_SECRET_KEY_ENV_NAME+x}" ]; then
    echo_err "Environment variable '$RCLONE_SECRET_KEY_ENV_NAME' is mandatory for rclone s3."
    exit 1
  else
    # export RCLONE_CONFIG_GIT_BACKUP_SECRET_ACCESS_KEY=XXX
    export RCLONE_CONFIG_GIT_BACKUP_SECRET_ACCESS_KEY=${!RCLONE_SECRET_KEY_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone SecretKey: xxxx"
  fi;

  # Not sure but with IDrive
  export RCLONE_CONFIG_GIT_BACKUP_NO_CHECK_BUCKET=true
  export RCLONE_CONFIG_GIT_BACKUP_SERVER_SIDE_ENCRYPTION=aws:kms

  # Bucket Name
  RCLONE_BUCKET_NAME_ENV_NAME="GIT_${GIT_REGISTRY}_RCLONE_BUCKET_NAME"
  if [ -z "${!RCLONE_BUCKET_NAME_ENV_NAME+x}" ]; then
      echo_err "Environment variable '$RCLONE_BUCKET_NAME_ENV_NAME' is mandatory for rclone s3."
      exit 1
  else
    S3_BUCKET_NAME=${!RCLONE_BUCKET_NAME_ENV_NAME}
    echo_log "$FUNCTION_NAME:   * Rclone Bucket Name: $S3_BUCKET_NAME"
  fi;


  echo_log "$FUNCTION_NAME: Mount Rclone $GIT_REGISTRY at $RCLONE_MOUNTED_PATH"
  # git_backup in the command below
  # is used in all RCONF variable
  # ie it's `GIT_BACKUP` in `RCLONE_CONFIG_GIT_BACKUP_SECRET_ACCESS_KEY`
  # don't change it
  RCLONE_COMMAND="rclone mount git_backup:$S3_BUCKET_NAME $RCLONE_MOUNTED_PATH"
  if [ $RCLONE_PROCESS_MODE == "daemon" ]; then
    RCLONE_COMMAND="$RCLONE_COMMAND --daemon"
  fi;
  echo_log "$FUNCTION_NAME: Executing the command: $RCLONE_COMMAND"
  eval "$RCLONE_COMMAND"

  echo_log "$FUNCTION_NAME: Rclone $GIT_REGISTRY mounted at $RCLONE_MOUNTED_PATH"

}

function set_env(){

    local FUNCTION_NAME="set-env"

    local SILENT_OPTION=""

    # The registry is an unique name
    # that identifies a Git Server instance
    GIT_REGISTRY=""

    # This for loop should have no echo
    # Why? We use this function to get the list of repo to handle
    # We therefore need the raw output without any echo
    for arg in "$@"; do
        case "$arg" in
        "")
          # empty arg
          ;;
        "--silent")
          SILENT_OPTION="--silent"
          ;;
        *)
          # Command or arg
          if [ "$GIT_REGISTRY" == "" ]; then
              GIT_REGISTRY="${arg^^}" # ^^ for uppercase
            else
              echo_err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only one argument, the instance. ($arg) is the second argument"
              exit 1;
          fi
          shift
          ;;
        esac
    done

    if [ "$GIT_REGISTRY" == "" ]; then
      echo_err "$FUNCTION_NAME: The first argument should be not empty with the git instance name"
      exit 1;
    fi

    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Setting env for Git Instance: $GIT_REGISTRY"

    # Target
    GIT_PLATFORM_ENV_NAME="GIT_${GIT_REGISTRY}_PLATFORM"
    if [ -z "${!GIT_PLATFORM_ENV_NAME+x}" ]; then
      echo_err "Environment variable '$GIT_PLATFORM_ENV_NAME' does not exist."
      exit 1
    else
      GIT_PLATFORM=${!GIT_PLATFORM_ENV_NAME}
      echo_log "$SILENT_OPTION" "$FUNCTION_NAME:  * Platform: $GIT_PLATFORM"
    fi

    # Domain
    GIT_DOMAIN=""
    GIT_DOMAIN_ENV_NAME="GIT_${GIT_REGISTRY}_DOMAIN"
    if [ -z "${!GIT_DOMAIN_ENV_NAME+x}" ]; then
      case ${GIT_PLATFORM} in
        github)
          GIT_DOMAIN="github.com"
          ;;
        gogs)
          echo_err "Environment variable '$GIT_DOMAIN_ENV_NAME' is mandatory for gogs"
          exit 1
          ;;
        *)
          # Local registry does not have any domain
          ;;
        esac
    else
      GIT_DOMAIN=${!GIT_DOMAIN_ENV_NAME}
    fi
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME:  * Domain: $GIT_DOMAIN"

    # API Access Token
    GIT_TOKEN_ENV_NAME="GIT_${GIT_REGISTRY}_TOKEN"
    if [ -z "${!GIT_TOKEN_ENV_NAME+x}" ]; then
        unset GIT_TOKEN;
        echo_log "$SILENT_OPTION" "$FUNCTION_NAME:  * Api Token: Variable ($GIT_TOKEN_ENV_NAME) not found"
      else
        GIT_TOKEN=${!GIT_TOKEN_ENV_NAME}
        echo_log "$SILENT_OPTION" "$FUNCTION_NAME:  * Api Token: Found"
    fi;

}


######################################
# List repo for a git provider
#####################################
function list_repo(){

  local FUNCTION_NAME="List Repo"
  local GIT_REGISTRY=""
  # Report are default value for JQ expression
  local REPORT=""
  # The default Jq args are platform dependent
  local JQ_EXPRESSION=""
  local JQ_RAW_OUTPUT_OPTION=""
  # By default, echo are added to the output
  local SILENT_OPTION=""

  # The maximum of repo to retrieved
  local MAX_REPO_COUNT=""
  # This for loop should have no echo
  # Why? We use this function to get the list of repo to handle
  # We therefore need the raw output without any echo
  for arg in "$@"; do
    case "$arg" in
    "--silent")
      SILENT_OPTION="--silent"
      ;;
    --jq-expression=*)
      JQ_EXPRESSION=$(getOptionValue "$arg")
      shift
      ;;
    --max-repo-count=*)
      MAX_REPO_COUNT=$(getOptionValue "$arg")
      shift
      ;;
    "--jq-raw-output"|"--jq-raw")
      JQ_RAW_OUTPUT_OPTION="--raw-output"
      shift
      ;;
    --report=*)
      REPORT=$(getOptionValue "$arg")
      shift
      ;;
    "--help"|"-h")
      help_list_repo
      exit
      ;;
    *)
      # Command or arg
      if [ "$GIT_REGISTRY" == "" ]; then
          GIT_REGISTRY=$arg
        else
          echo_err "$FUNCTION_NAME: Too much argument found: list-repo except only one argument, the instance. ($arg) is the second argument"
          exit 1;
      fi
      shift
      ;;
    esac
  done

  set_env "$GIT_REGISTRY" "$SILENT_OPTION"

  # Report
  # Report are default values
  if [ "${REPORT}" == "" ]; then
    REPORT="default"
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: No Report found, set to: $REPORT"
  else
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Report: $REPORT"
  fi

  case ${GIT_PLATFORM} in
  gogs)

    # Auth Token
    if [ -z "${GIT_TOKEN+x}" ]; then
      echo_err "Git Token is mandatory to list repo for $GIT_PLATFORM"
      exit 1
    fi

    case ${REPORT} in
      "ls")
        JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      "asis")
        JQ_EXPRESSION_REPORT='.'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "default")
        JQ_EXPRESSION_REPORT='[.[] | .full_name]'
        JQ_RAW_OUTPUT_REPORT_OPTION=""
        ;;
      "csv")
        JQ_EXPRESSION_REPORT='["full_name", "fork"], (.[] | [.full_name, .fork]) | @csv'
        JQ_RAW_OUTPUT_OPTION="--raw-output"
        ;;
      *)
        echo_err "$FUNCTION_NAME: The report ($REPORT) is unknown"
        exit 1;
      ;;
    esac

    # Jq arguments
    if [ "${JQ_EXPRESSION}" == "" ]; then
        JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
    fi
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
    if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
        JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
    fi
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

    # URL AI
    URL_API="https://$GIT_DOMAIN/api/v1/user/repos"
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Requesting $URL_API"

    # Execute
    echo "$SILENT_OPTION" ""
    # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
    # shellcheck disable=SC2086
    curl -sS -H "Authorization: token $GIT_TOKEN" "$URL_API" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"
    echo "$SILENT_OPTION" ""
    ;;
  github)

      # Auth Token
      if [ -z "${GIT_TOKEN+x}" ]; then
        echo_err "Git Token is mandatory to list repo for $GIT_PLATFORM"
        exit 1
      fi

      case ${REPORT} in
        "ls")
          JQ_EXPRESSION_REPORT="map(.full_name) | join(\"$IFS\")"
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        "asis")
          JQ_EXPRESSION_REPORT='.'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "default")
          JQ_EXPRESSION_REPORT='[.[] | .full_name]'
          JQ_RAW_OUTPUT_REPORT_OPTION=""
          ;;
        "csv")
          JQ_EXPRESSION_REPORT='["full_name", "fork", "clone_url"], (.[] | [.full_name, .fork, .clone_url]) | @csv'
          JQ_RAW_OUTPUT_OPTION="--raw-output"
          ;;
        *)
          echo_err "$FUNCTION_NAME: The report ($REPORT) is unknown"
          exit 1;
        ;;
      esac

      # Jq arguments
      if [ "${JQ_EXPRESSION}" == "" ]; then
          JQ_EXPRESSION=${JQ_EXPRESSION_REPORT}
      fi
      echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Jq Expression: $JQ_EXPRESSION"
      if [ "${JQ_RAW_OUTPUT_OPTION}" == "" ]; then
          JQ_RAW_OUTPUT_OPTION=${JQ_RAW_OUTPUT_REPORT_OPTION}
      fi
      echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Jq Raw Output Option: $JQ_RAW_OUTPUT_OPTION"

      # URL API: repo for the authenticated user
      # Doc: https://docs.github.com/en/rest/repos/repos?apiVersion=2022-11-28#list-repositories-for-the-authenticated-user
      URL_API="https://api.github.com/user/repos"
      REPO_BY_PAGE=100
      ACTUAL_PAGE=1
      TOTAL_COUNT=0
      TOTAL_REPOS='[]'
      while true; do

          REQUEST_URL="$URL_API?per_page=$REPO_BY_PAGE&page=$ACTUAL_PAGE"
          echo_log "$SILENT_OPTION" "$FUNCTION_NAME: $ACTUAL_PAGE - Requesting $REPO_BY_PAGE repo ($REQUEST_URL)";

          ACTUAL_REPOS=$(curl -sS -H "Authorization: token $GIT_TOKEN" "$REQUEST_URL")
          TOTAL_REPOS=$(jq -s '.[0] + .[1]' <(echo "$TOTAL_REPOS") <(echo "$ACTUAL_REPOS"))

          # Count the number of objects
          COUNT=$(echo "$ACTUAL_REPOS" | jq ". | length")
          # Add the COUNT to the total COUNT
          TOTAL_COUNT=$((TOTAL_COUNT + COUNT))

          # Break on last page
          if [ "$COUNT" -lt $REPO_BY_PAGE ]; then
              echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Retrieved $TOTAL_COUNT repositories";
              break
          fi

          # Break on max count
          if [ "$MAX_REPO_COUNT" != "" ] && [ "$TOTAL_COUNT" -ge "$MAX_REPO_COUNT" ]; then
              echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Max total count repositories ($TOTAL_COUNT) reached";
              break
          fi

          ACTUAL_PAGE=$((ACTUAL_PAGE + 1))

      done

      echo_log "$SILENT_OPTION" "$FUNCTION_NAME: "
      # $JQ_RAW_OUTPUT_OPTION should not be quoted because jq does not accept empty string argument
      # shellcheck disable=SC2086
      echo "$TOTAL_REPOS" | jq $JQ_RAW_OUTPUT_OPTION "${JQ_EXPRESSION}"

      ;;
  *)
    echo_err "The git platform $GIT_PLATFORM is not yet implemented"
    exit 1
    ;;
  esac

}

function backup() {

  local FUNCTION_NAME="backup"
  local GIT_SOURCE=""
  local GIT_TARGET=""
  for arg in "$@"; do
      case "$arg" in
        "--help"|"-h")
          help_backup
          exit;
         ;;
        *)
          if [ "$GIT_SOURCE" == "" ]; then
              GIT_SOURCE="${arg^^}" # ^^ for uppercase
          elif [ "$GIT_TARGET" == "" ]; then
              GIT_TARGET="${arg^^}" # ^^ for uppercase
          else
              echo_err "$FUNCTION_NAME: Too much argument found: $FUNCTION_NAME except only 2 arguments, the source and the target. ($arg) is the third argument"
              exit 1;
          fi
          shift
          ;;
      esac
  done

  # Source
  if [ "$GIT_SOURCE" == "" ]; then
    echo_err "$FUNCTION_NAME: A git source is excepted as first argument"
    exit 1;
  fi

  # Target
  if [ "$GIT_TARGET" == "" ]; then
    echo_err "$FUNCTION_NAME: A git target is excepted as second argument"
    exit 1;
  fi

  set_env "$GIT_TARGET"
  GIT_PLATFORM_TARGET=$GIT_PLATFORM
  if [ "$GIT_PLATFORM_TARGET" == "rclone" ]; then
    echo_log "$FUNCTION_NAME: Mount rclone"
    mount
  fi

  # Get the Json as CSV and loop over it
  echo_log "$FUNCTION_NAME: Looping over the repo of the registry $GIT_SOURCE"
  result=$(list_repo "$GIT_SOURCE" "--jq-expression=(.[] | [.full_name, .fork, .ssh_url]) | @csv" '--jq-raw-output' '--silent')
  ACTUAL_COUNT=0
  #GIT_SSH_ENV="GIT_SSH_COMMAND='ssh -i private_key_file -o IdentitiesOnly=yes'"
  GIT_SSH_ENV=""
  echo "$result" | while IFS=',' read -r REPO_FULL_NAME REPO_FORK REPO_SSH_URL; do
    REPO_FULL_NAME=$(echo "$REPO_FULL_NAME" | tr -d '"')

    if [ "$REPO_FORK" == true ]; then
      echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Skipped forked repo: $REPO_FULL_NAME";
      continue
    else
      echo_log "$SILENT_OPTION" "Cloning Repo: $REPO_FULL_NAME"
    fi

    TARGET_DIR=$RCLONE_MOUNTED_PATH/$REPO_FULL_NAME

    if [ -d "$TARGET_DIR" ]; then
      echo_log "$SILENT_OPTION" "Repo $REPO_FULL_NAME already exist. Fetching"
      mkdir -p "$TARGET_DIR"
      GIT_COMMAND="$GIT_SSH_ENV git -C $TARGET_DIR fetch --all"
    else
      echo_log "$SILENT_OPTION" "Repo $REPO_FULL_NAME absent. Cloning as mirror"
      GIT_COMMAND="$GIT_SSH_ENV git clone --mirror $REPO_SSH_URL $TARGET_DIR"
    fi;
    echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Executing: $GIT_COMMAND";
    eval "$GIT_COMMAND"

    # Break
    if [ "$ACTUAL_COUNT" -gt 5 ]; then
        echo_log "$SILENT_OPTION" "$FUNCTION_NAME: Cloned $ACTUAL_COUNT repositories";
        break
    fi

    ACTUAL_COUNT=$((ACTUAL_COUNT + 1))
  done

  if [ "$GIT_PLATFORM_TARGET" == "rclone" ]; then
    echo_log "$FUNCTION_NAME: Unmount rclone"
    mount --unmount
  fi


}


COMMAND=""

# Parsing only the command
# Options are command related and are parsed
# in each function
SILENT_OPTION=""
DEV_MODE=""
for arg in "$@"; do
  case "$arg" in
  --dev)
    DEV_MODE=true
    ;;
  --silent|s)
    SILENT_OPTION="--silent"
    ;;
  --*|-*)
    ARGUMENTS+=("$arg")
    shift
    ;;
  *)
    # Command or arg
    if [ "$COMMAND" == "" ]; then
        COMMAND=$1
      else
        ARGUMENTS+=("$arg")
    fi
    shift
    ;;
  esac
done

if [ -z "$COMMAND" ]; then
  echo_log "$SILENT_OPTION" 'No command was given, help chosen.'
  COMMAND='help'
fi

 echo_log "$SILENT_OPTION" ""
 echo_log "$SILENT_OPTION" "${CLI_NAME^} ${COMMAND^}"
 echo_log "$SILENT_OPTION" "-------------------------------------------"
 echo_log "$SILENT_OPTION" ""
case ${COMMAND} in
help)
  help
  ;;
list-repo)
  list_repo "$SILENT_OPTION" "${ARGUMENTS[@]}"
  ;;
mirror)
  backup "$SILENT_OPTION" "${ARGUMENTS[@]}"
  ;;
mount)
  mount "$SILENT_OPTION" "${ARGUMENTS[@]}"
  ;;
*)
  echo_err "The command $COMMAND is unknown"
  help
  exit 1
  ;;
esac
